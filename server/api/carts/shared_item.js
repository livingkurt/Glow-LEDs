import { optionSchema, optionValueSchema } from "../products/product.js";
import mongoose from "mongoose";

export const sharedItemSchema = {
  name: { type: String, required: true },
  price: { type: Number, required: true },
  category: { type: String },
  subcategory: { type: String },
  product_collection: { type: String },
  display_image: { type: String },
  display_image_object: { type: mongoose.Schema.Types.ObjectId, ref: "Image" },
  qty: { type: Number },
  quantity: { type: Number },
  max_display_quantity: { type: Number },
  max_quantity: { type: Number },
  count_in_stock: { type: Number },
  currentOptions: [optionSchema],
  selectedOptions: [optionValueSchema],
  tags: [{ type: mongoose.Schema.Types.ObjectId, ref: "Tag" }],
  pathname: { type: String },
  sale_price: { type: Number },
  sale_start_date: { type: Date },
  sale_end_date: { type: Date },
  dimensions: {
    weight_pounds: { type: Number },
    weight_ounces: { type: Number },
    product_length: { type: Number },
    product_width: { type: Number },
    product_height: { type: Number },
    package_length: { type: Number },
    package_width: { type: Number },
    package_height: { type: Number },
    package_volume: { type: Number },
  },
  processing_time: [{ type: Number }],
  finite_stock: { type: Boolean },
  wholesale_product: { type: Boolean },
  wholesale_price: { type: Number },
  itemType: { type: String, enum: ["product", "ticket", "gift_card"] },
  event: { type: mongoose.Schema.Types.ObjectId, ref: "Event" },
  ticket_type: { type: String },
  isPreOrder: { type: Boolean, default: false },
  preOrderReleaseDate: { type: Date },
  preOrderQuantity: { type: Number, default: 0 },
  ticketsUsed: [
    {
      ticketId: { type: String },
      used: { type: Boolean, default: false },
    },
  ],
  ticket: { type: mongoose.Schema.Types.ObjectId, ref: "Ticket" },
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "Product",
  },
};
